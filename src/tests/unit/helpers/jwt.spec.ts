// @ts-nocheck
import jwt from 'jsonwebtoken';

import { generateJwtToken, JwtPayload } from '../../../helpers/jwt';

jest.mock('jsonwebtoken', () => ({
  sign: jest.fn(),
}));

describe('generateJwtToken', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should call jwt.sign with the correct payload and options', () => {
    const payload: JwtPayload = { userId: 'userId' };
    const jwtSecret = 'secret';
    const jwtExpiresIn = '1h';
    process.env.JWT_SECRET = jwtSecret;
    process.env.JWT_EXPIRES_IN = jwtExpiresIn;

    generateJwtToken(payload);
    expect(jwt.sign).toHaveBeenCalledWith(payload, jwtSecret, { expiresIn: jwtExpiresIn });
  });

  it('should return the token generated by jwt.sign', () => {
    const payload: JwtPayload = { userId: 'userId' };
    const jwtToken = 'token';

    jwt.sign.mockReturnValue(jwtToken);

    const result = generateJwtToken(payload);
    expect(result).toBe(jwtToken);
  });
});
